diff --git a/pom.xml b/pom.xml
index 53dec6c..0f49686 100644
--- a/pom.xml
+++ b/pom.xml
@@ -30,10 +30,10 @@
     </organization>
     <properties>
         <amps.version>6.1.0</amps.version>
-        <jira.version>6.4.6</jira.version>
+        <jira.version>6.0.1</jira.version>
         <plugin.testrunner.version>1.1.1</plugin.testrunner.version>
         <refapp.version>2.12.0</refapp.version>
-        <testkit.version>6.4.6</testkit.version>
+        <testkit.version>6.0.1</testkit.version>
     </properties>
     <dependencies>
         <dependency>
diff --git a/src/main/java/com/codenvy/jira/IssueCreatedListener.java b/src/main/java/com/codenvy/jira/IssueCreatedListener.java
index 6dc251f..b00db3c 100644
--- a/src/main/java/com/codenvy/jira/IssueCreatedListener.java
+++ b/src/main/java/com/codenvy/jira/IssueCreatedListener.java
@@ -27,8 +27,6 @@ import com.atlassian.jira.event.type.EventType;
 import com.atlassian.jira.issue.Issue;
 import com.atlassian.jira.issue.IssueInputParameters;
 import com.atlassian.jira.issue.MutableIssue;
-import com.atlassian.jira.user.ApplicationUser;
-import com.atlassian.jira.user.ApplicationUsers;
 import com.atlassian.sal.api.pluginsettings.PluginSettings;
 import com.atlassian.sal.api.pluginsettings.PluginSettingsFactory;
 
@@ -230,8 +228,7 @@ public class IssueCreatedListener implements InitializingBean, DisposableBean {
                 String developFieldValue = "<a id=\"codenvy_develop_field\" href=\"" + developFactoryUrl + "\">Develop in Codenvy</a>";
                 String reviewFieldValue = "<a id=\"codenvy_review_field\" href=\"" + reviewFactoryUrl + "\">Review in Codenvy</a>";
 
-                final ApplicationUser appUser = ApplicationUsers.from(eventUser);
-                updateIssue(appUser, issueKey, developFieldId, developFieldValue, reviewFieldId, reviewFieldValue);
+                updateIssue(eventUser, issueKey, developFieldId, developFieldValue, reviewFieldId, reviewFieldValue);
 
             } catch (JSONException | IOException | FieldException e) {
                 LOG.error(e.getMessage());
@@ -242,29 +239,29 @@ public class IssueCreatedListener implements InitializingBean, DisposableBean {
     /**
      * Update a JIRA issue with given value in fields Develop and Review
      *
-     * @param appUser the user from current session
+     * @param user the user from current session
      * @param issueKey the key of the issue to update
      * @param developFieldId the id of custom field Develop
      * @param developValue the value to put in custom field Develop
      * @param reviewFieldId the id of custom field Review
      * @param reviewValue the value to put in custom field Review
      */
-    private void updateIssue(ApplicationUser appUser, String issueKey, String developFieldId, String developValue,
+    private void updateIssue(User user, String issueKey, String developFieldId, String developValue,
                              String reviewFieldId, String reviewValue) {
         // Get the issue from the key that's passed in
-        IssueService.IssueResult issueResult = issueService.getIssue(appUser, issueKey);
+        IssueService.IssueResult issueResult = issueService.getIssue(user, issueKey);
         MutableIssue issue = issueResult.getIssue();
         // Next we need to validate the updated issue
         IssueInputParameters issueInputParameters = issueService.newIssueInputParameters();
         issueInputParameters.addCustomFieldValue(developFieldId, developValue);
         issueInputParameters.addCustomFieldValue(reviewFieldId, reviewValue);
-        IssueService.UpdateValidationResult result = issueService.validateUpdate(appUser, issue.getId(),
+        IssueService.UpdateValidationResult result = issueService.validateUpdate(user, issue.getId(),
                                                                                  issueInputParameters);
         if (result.getErrorCollection().hasAnyErrors()) {
             LOG.warn("Issue " + issueKey + " not updated due to error(s): " + result.getErrorCollection().getErrorMessages() + ".");
         } else {
             // Validation passes
-            issueService.update(appUser, result);
+            issueService.update(user, result);
             LOG.debug("Codenvy fields successfully updated on issue " + issueKey + ".");
         }
     }
diff --git a/src/main/java/com/codenvy/jira/customfield/DevelopCustomField.java b/src/main/java/com/codenvy/jira/customfield/DevelopCustomField.java
index 2221ddf..bbe042e 100644
--- a/src/main/java/com/codenvy/jira/customfield/DevelopCustomField.java
+++ b/src/main/java/com/codenvy/jira/customfield/DevelopCustomField.java
@@ -19,10 +19,8 @@ import com.atlassian.jira.security.JiraAuthenticationContext;
 
 public class DevelopCustomField extends GenericTextCFType {
 
-    public DevelopCustomField(CustomFieldValuePersister customFieldValuePersister, GenericConfigManager genericConfigManager,
-                              TextFieldCharacterLengthValidator textFieldCharacterLengthValidator,
-                              JiraAuthenticationContext jiraAuthenticationContext) {
+    public DevelopCustomField(CustomFieldValuePersister customFieldValuePersister, GenericConfigManager genericConfigManager) {
 
-        super(customFieldValuePersister, genericConfigManager, textFieldCharacterLengthValidator, jiraAuthenticationContext);
+        super(customFieldValuePersister, genericConfigManager);
     }
 }
diff --git a/src/main/java/com/codenvy/jira/customfield/ReviewCustomField.java b/src/main/java/com/codenvy/jira/customfield/ReviewCustomField.java
index a6bedc8..331690c 100644
--- a/src/main/java/com/codenvy/jira/customfield/ReviewCustomField.java
+++ b/src/main/java/com/codenvy/jira/customfield/ReviewCustomField.java
@@ -19,11 +19,9 @@ import com.atlassian.jira.security.JiraAuthenticationContext;
 
 public class ReviewCustomField extends GenericTextCFType {
 
-    public ReviewCustomField(CustomFieldValuePersister customFieldValuePersister, GenericConfigManager genericConfigManager,
-                             TextFieldCharacterLengthValidator textFieldCharacterLengthValidator,
-                             JiraAuthenticationContext jiraAuthenticationContext) {
+    public ReviewCustomField(CustomFieldValuePersister customFieldValuePersister, GenericConfigManager genericConfigManager) {
 
-        super(customFieldValuePersister, genericConfigManager, textFieldCharacterLengthValidator, jiraAuthenticationContext);
+        super(customFieldValuePersister, genericConfigManager);
     }
 }
 
diff --git a/src/test/java/ut/com/codenvy/jira/IssueCreatedListenerUnitTest.java b/src/test/java/ut/com/codenvy/jira/IssueCreatedListenerUnitTest.java
index ef71ce6..027eaaf 100644
--- a/src/test/java/ut/com/codenvy/jira/IssueCreatedListenerUnitTest.java
+++ b/src/test/java/ut/com/codenvy/jira/IssueCreatedListenerUnitTest.java
@@ -55,7 +55,7 @@ public class IssueCreatedListenerUnitTest {
         mockIssueService = mock(IssueService.class);
         mockFieldManager = mock(FieldManager.class);
 
-        ApplicationUser mockUser = mock(ApplicationUser.class);
+        User mockUser = mock(User.class);
 
         MutableIssue mockIssue = mock(MutableIssue.class);
         when(mockIssue.getId()).thenReturn(1L);
